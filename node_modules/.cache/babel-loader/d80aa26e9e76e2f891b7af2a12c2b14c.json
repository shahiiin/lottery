{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { isLeaf, toPathKey } from '../utils/commonUtil';\nimport CascaderContext from '../context';\nimport Checkbox from './Checkbox';\nimport { SEARCH_MARK } from '../hooks/useSearchOptions';\nexport var FIX_LABEL = '__cascader_fix_label__';\nexport default function Column(_ref) {\n  var prefixCls = _ref.prefixCls,\n      multiple = _ref.multiple,\n      options = _ref.options,\n      activeValue = _ref.activeValue,\n      prevValuePath = _ref.prevValuePath,\n      onToggleOpen = _ref.onToggleOpen,\n      onSelect = _ref.onSelect,\n      onActive = _ref.onActive,\n      checkedSet = _ref.checkedSet,\n      halfCheckedSet = _ref.halfCheckedSet,\n      loadingKeys = _ref.loadingKeys,\n      isSelectable = _ref.isSelectable;\n  var menuPrefixCls = \"\".concat(prefixCls, \"-menu\");\n  var menuItemPrefixCls = \"\".concat(prefixCls, \"-menu-item\");\n\n  var _React$useContext = React.useContext(CascaderContext),\n      fieldNames = _React$useContext.fieldNames,\n      changeOnSelect = _React$useContext.changeOnSelect,\n      expandTrigger = _React$useContext.expandTrigger,\n      expandIcon = _React$useContext.expandIcon,\n      loadingIcon = _React$useContext.loadingIcon,\n      dropdownMenuColumnStyle = _React$useContext.dropdownMenuColumnStyle;\n\n  var hoverOpen = expandTrigger === 'hover'; // ============================ Option ============================\n\n  var optionInfoList = React.useMemo(function () {\n    return options.map(function (option) {\n      var _option$FIX_LABEL;\n\n      var disabled = option.disabled;\n      var searchOptions = option[SEARCH_MARK];\n      var label = (_option$FIX_LABEL = option[FIX_LABEL]) !== null && _option$FIX_LABEL !== void 0 ? _option$FIX_LABEL : option[fieldNames.label];\n      var value = option[fieldNames.value];\n      var isMergedLeaf = isLeaf(option, fieldNames); // Get real value of option. Search option is different way.\n\n      var fullPath = searchOptions ? searchOptions.map(function (opt) {\n        return opt[fieldNames.value];\n      }) : [].concat(_toConsumableArray(prevValuePath), [value]);\n      var fullPathKey = toPathKey(fullPath);\n      var isLoading = loadingKeys.includes(fullPathKey); // >>>>> checked\n\n      var checked = checkedSet.has(fullPathKey); // >>>>> halfChecked\n\n      var halfChecked = halfCheckedSet.has(fullPathKey);\n      return {\n        disabled: disabled,\n        label: label,\n        value: value,\n        isLeaf: isMergedLeaf,\n        isLoading: isLoading,\n        checked: checked,\n        halfChecked: halfChecked,\n        option: option,\n        fullPath: fullPath,\n        fullPathKey: fullPathKey\n      };\n    });\n  }, [options, checkedSet, fieldNames, halfCheckedSet, loadingKeys, prevValuePath]); // ============================ Render ============================\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"ul\", {\n      className: menuPrefixCls,\n      role: \"menu\"\n    }, optionInfoList.map(function (_ref2) {\n      var _classNames;\n\n      var disabled = _ref2.disabled,\n          label = _ref2.label,\n          value = _ref2.value,\n          isMergedLeaf = _ref2.isLeaf,\n          isLoading = _ref2.isLoading,\n          checked = _ref2.checked,\n          halfChecked = _ref2.halfChecked,\n          option = _ref2.option,\n          fullPath = _ref2.fullPath,\n          fullPathKey = _ref2.fullPathKey; // >>>>> Open\n\n      var triggerOpenPath = function triggerOpenPath() {\n        if (!disabled && (!hoverOpen || !isMergedLeaf)) {\n          onActive(fullPath);\n        }\n      }; // >>>>> Selection\n\n\n      var triggerSelect = function triggerSelect() {\n        if (isSelectable(option)) {\n          onSelect(fullPath, isMergedLeaf);\n        }\n      }; // >>>>> Title\n\n\n      var title;\n\n      if (typeof option.title === 'string') {\n        title = option.title;\n      } else if (typeof label === 'string') {\n        title = label;\n      } // >>>>> Render\n\n\n      return (\n        /*#__PURE__*/\n        React.createElement(\"li\", {\n          key: fullPathKey,\n          className: classNames(menuItemPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-expand\"), !isMergedLeaf), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-active\"), activeValue === value), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-loading\"), isLoading), _classNames)),\n          style: dropdownMenuColumnStyle,\n          role: \"menuitemcheckbox\",\n          title: title,\n          \"aria-checked\": checked,\n          \"data-path-key\": fullPathKey,\n          onClick: function onClick() {\n            triggerOpenPath();\n\n            if (!multiple || isMergedLeaf) {\n              triggerSelect();\n            }\n          },\n          onDoubleClick: function onDoubleClick() {\n            if (changeOnSelect) {\n              onToggleOpen(false);\n            }\n          },\n          onMouseEnter: function onMouseEnter() {\n            if (hoverOpen) {\n              triggerOpenPath();\n            }\n          },\n          onMouseDown: function onMouseDown(e) {\n            // Prevent selector from blurring\n            e.preventDefault();\n          }\n        }, multiple &&\n        /*#__PURE__*/\n        React.createElement(Checkbox, {\n          prefixCls: \"\".concat(prefixCls, \"-checkbox\"),\n          checked: checked,\n          halfChecked: halfChecked,\n          disabled: disabled,\n          onClick: function onClick(e) {\n            e.stopPropagation();\n            triggerSelect();\n          }\n        }),\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          className: \"\".concat(menuItemPrefixCls, \"-content\")\n        }, label), !isLoading && expandIcon && !isMergedLeaf &&\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          className: \"\".concat(menuItemPrefixCls, \"-expand-icon\")\n        }, expandIcon), isLoading && loadingIcon &&\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          className: \"\".concat(menuItemPrefixCls, \"-loading-icon\")\n        }, loadingIcon))\n      );\n    }))\n  );\n}","map":{"version":3,"sources":["/home/shahin/Desktop/project/lottery-frontend/node_modules/rc-cascader/es/OptionList/Column.js"],"names":["_defineProperty","_toConsumableArray","React","classNames","isLeaf","toPathKey","CascaderContext","Checkbox","SEARCH_MARK","FIX_LABEL","Column","_ref","prefixCls","multiple","options","activeValue","prevValuePath","onToggleOpen","onSelect","onActive","checkedSet","halfCheckedSet","loadingKeys","isSelectable","menuPrefixCls","concat","menuItemPrefixCls","_React$useContext","useContext","fieldNames","changeOnSelect","expandTrigger","expandIcon","loadingIcon","dropdownMenuColumnStyle","hoverOpen","optionInfoList","useMemo","map","option","_option$FIX_LABEL","disabled","searchOptions","label","value","isMergedLeaf","fullPath","opt","fullPathKey","isLoading","includes","checked","has","halfChecked","createElement","className","role","_ref2","_classNames","triggerOpenPath","triggerSelect","title","key","style","onClick","onDoubleClick","onMouseEnter","onMouseDown","e","preventDefault","stopPropagation"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { isLeaf, toPathKey } from '../utils/commonUtil';\nimport CascaderContext from '../context';\nimport Checkbox from './Checkbox';\nimport { SEARCH_MARK } from '../hooks/useSearchOptions';\nexport var FIX_LABEL = '__cascader_fix_label__';\nexport default function Column(_ref) {\n  var prefixCls = _ref.prefixCls,\n      multiple = _ref.multiple,\n      options = _ref.options,\n      activeValue = _ref.activeValue,\n      prevValuePath = _ref.prevValuePath,\n      onToggleOpen = _ref.onToggleOpen,\n      onSelect = _ref.onSelect,\n      onActive = _ref.onActive,\n      checkedSet = _ref.checkedSet,\n      halfCheckedSet = _ref.halfCheckedSet,\n      loadingKeys = _ref.loadingKeys,\n      isSelectable = _ref.isSelectable;\n  var menuPrefixCls = \"\".concat(prefixCls, \"-menu\");\n  var menuItemPrefixCls = \"\".concat(prefixCls, \"-menu-item\");\n\n  var _React$useContext = React.useContext(CascaderContext),\n      fieldNames = _React$useContext.fieldNames,\n      changeOnSelect = _React$useContext.changeOnSelect,\n      expandTrigger = _React$useContext.expandTrigger,\n      expandIcon = _React$useContext.expandIcon,\n      loadingIcon = _React$useContext.loadingIcon,\n      dropdownMenuColumnStyle = _React$useContext.dropdownMenuColumnStyle;\n\n  var hoverOpen = expandTrigger === 'hover'; // ============================ Option ============================\n\n  var optionInfoList = React.useMemo(function () {\n    return options.map(function (option) {\n      var _option$FIX_LABEL;\n\n      var disabled = option.disabled;\n      var searchOptions = option[SEARCH_MARK];\n      var label = (_option$FIX_LABEL = option[FIX_LABEL]) !== null && _option$FIX_LABEL !== void 0 ? _option$FIX_LABEL : option[fieldNames.label];\n      var value = option[fieldNames.value];\n      var isMergedLeaf = isLeaf(option, fieldNames); // Get real value of option. Search option is different way.\n\n      var fullPath = searchOptions ? searchOptions.map(function (opt) {\n        return opt[fieldNames.value];\n      }) : [].concat(_toConsumableArray(prevValuePath), [value]);\n      var fullPathKey = toPathKey(fullPath);\n      var isLoading = loadingKeys.includes(fullPathKey); // >>>>> checked\n\n      var checked = checkedSet.has(fullPathKey); // >>>>> halfChecked\n\n      var halfChecked = halfCheckedSet.has(fullPathKey);\n      return {\n        disabled: disabled,\n        label: label,\n        value: value,\n        isLeaf: isMergedLeaf,\n        isLoading: isLoading,\n        checked: checked,\n        halfChecked: halfChecked,\n        option: option,\n        fullPath: fullPath,\n        fullPathKey: fullPathKey\n      };\n    });\n  }, [options, checkedSet, fieldNames, halfCheckedSet, loadingKeys, prevValuePath]); // ============================ Render ============================\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: menuPrefixCls,\n    role: \"menu\"\n  }, optionInfoList.map(function (_ref2) {\n    var _classNames;\n\n    var disabled = _ref2.disabled,\n        label = _ref2.label,\n        value = _ref2.value,\n        isMergedLeaf = _ref2.isLeaf,\n        isLoading = _ref2.isLoading,\n        checked = _ref2.checked,\n        halfChecked = _ref2.halfChecked,\n        option = _ref2.option,\n        fullPath = _ref2.fullPath,\n        fullPathKey = _ref2.fullPathKey;\n\n    // >>>>> Open\n    var triggerOpenPath = function triggerOpenPath() {\n      if (!disabled && (!hoverOpen || !isMergedLeaf)) {\n        onActive(fullPath);\n      }\n    }; // >>>>> Selection\n\n\n    var triggerSelect = function triggerSelect() {\n      if (isSelectable(option)) {\n        onSelect(fullPath, isMergedLeaf);\n      }\n    }; // >>>>> Title\n\n\n    var title;\n\n    if (typeof option.title === 'string') {\n      title = option.title;\n    } else if (typeof label === 'string') {\n      title = label;\n    } // >>>>> Render\n\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fullPathKey,\n      className: classNames(menuItemPrefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-expand\"), !isMergedLeaf), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-active\"), activeValue === value), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(menuItemPrefixCls, \"-loading\"), isLoading), _classNames)),\n      style: dropdownMenuColumnStyle,\n      role: \"menuitemcheckbox\",\n      title: title,\n      \"aria-checked\": checked,\n      \"data-path-key\": fullPathKey,\n      onClick: function onClick() {\n        triggerOpenPath();\n\n        if (!multiple || isMergedLeaf) {\n          triggerSelect();\n        }\n      },\n      onDoubleClick: function onDoubleClick() {\n        if (changeOnSelect) {\n          onToggleOpen(false);\n        }\n      },\n      onMouseEnter: function onMouseEnter() {\n        if (hoverOpen) {\n          triggerOpenPath();\n        }\n      },\n      onMouseDown: function onMouseDown(e) {\n        // Prevent selector from blurring\n        e.preventDefault();\n      }\n    }, multiple && /*#__PURE__*/React.createElement(Checkbox, {\n      prefixCls: \"\".concat(prefixCls, \"-checkbox\"),\n      checked: checked,\n      halfChecked: halfChecked,\n      disabled: disabled,\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        triggerSelect();\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-content\")\n    }, label), !isLoading && expandIcon && !isMergedLeaf && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-expand-icon\")\n    }, expandIcon), isLoading && loadingIcon && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\".concat(menuItemPrefixCls, \"-loading-icon\")\n    }, loadingIcon));\n  }));\n}"]},"metadata":{},"sourceType":"module"}